#!/usr/bin/env bash

# ARG_OPTIONAL_BOOLEAN([keep-homebrew],[k],[Keep Homebrew installed (only uninstall packages)])
# ARG_OPTIONAL_BOOLEAN([keep-xcode],[x],[Keep Xcode Command Line Tools installed])
# ARG_OPTIONAL_BOOLEAN([keep-repo],[r],[Keep the cloned repository])
# ARG_HELP([This script uninstalls everything installed by the setup script. By default it removes all packages, Homebrew, Xcode tools, and the repository. Use flags to keep specific components.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.11.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.dev for more info
# Generated online by https://argbash.dev/generate

die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}

begins_with_short_option()
{
	local first_option all_short_options='kxrh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_keep_homebrew="off"
_arg_keep_xcode="off"
_arg_keep_repo="off"

print_help()
{
	printf '%s\n' "This script uninstalls everything installed by the setup script. By default it removes all packages, Homebrew, Xcode tools, and the repository. Use flags to keep specific components."
	printf 'Usage: %s [-k|--(no-)keep-homebrew] [-x|--(no-)keep-xcode] [-r|--(no-)keep-repo] [-h|--help]\n' "$0"
	printf '\t%s\n' "-k, --keep-homebrew, --no-keep-homebrew: Keep Homebrew installed (only uninstall packages) (off by default)"
	printf '\t%s\n' "-x, --keep-xcode, --no-keep-xcode: Keep Xcode Command Line Tools installed (off by default)"
	printf '\t%s\n' "-r, --keep-repo, --no-keep-repo: Keep the cloned repository (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}

parse_commandline()
{
	local _key
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-k|--no-keep-homebrew|--keep-homebrew)
				_arg_keep_homebrew="on"
				test "${1:0:5}" = "--no-" && _arg_keep_homebrew="off"
				;;
			-k*)
				_arg_keep_homebrew="on"
				_next="${_key##-k}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-k" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-x|--no-keep-xcode|--keep-xcode)
				_arg_keep_xcode="on"
				test "${1:0:5}" = "--no-" && _arg_keep_xcode="off"
				;;
			-x*)
				_arg_keep_xcode="on"
				_next="${_key##-x}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-x" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-r|--no-keep-repo|--keep-repo)
				_arg_keep_repo="on"
				test "${1:0:5}" = "--no-" && _arg_keep_repo="off"
				;;
			-r*)
				_arg_keep_repo="on"
				_next="${_key##-r}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-r" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Color codes
GREEN='\033[0;32m'    # match square bracket for argbash: ]
YELLOW='\033[1;33m'   # match square bracket for argbash: ]
RED='\033[0;31m'      # match square bracket for argbash: ]
NC='\033[0m'          # match square bracket for argbash: ]

# Track failures
declare -a FAILURES=()

log_info() {
    echo -e "${YELLOW}[INFO] $1${NC}"
}

log_success() {
    echo -e "${GREEN}[SUCCESS] $1${NC}"
}

log_error() {
    echo -e "${RED}[ERROR] $1${NC}"
    FAILURES+=("$1")
}

log_warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

# Function to check if a command exists in PATH
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to find and setup Homebrew
setup_homebrew_path() {
    if command_exists brew; then
        return 0
    fi

    # Check common Homebrew locations
    if [ -x "/opt/homebrew/bin/brew" ]; then
        log_info "Found Homebrew at /opt/homebrew/bin/brew (Apple Silicon)"
        eval "$(/opt/homebrew/bin/brew shellenv)"
        return 0
    elif [ -x "/usr/local/bin/brew" ]; then
        log_info "Found Homebrew at /usr/local/bin/brew (Intel)"
        eval "$(/usr/local/bin/brew shellenv)"
        return 0
    fi

    return 1
}

# Function to print colored banner
print_banner() {
    local RED='\033[31m'
    local YELLOW='\033[33m'
    local NC='\033[0m'
    
    echo -e "${RED}"
    cat << 'EOF'

 _   _       _           _        _ _ 
| | | |     (_)         | |      | | |
| | | |_ __  _ _ __  ___| |_ __ _| | |
| | | | '_ \| | '_ \/ __| __/ _` | | |
| |_| | | | | | | | \__ \ || (_| | | |
 \___/|_| |_|_|_| |_|___/\__\__,_|_|_|
                                      
EOF
    echo -e "${NC}"
    
    echo -e "${YELLOW}This script will uninstall the development environment components installed by the setup script.${NC}"
    echo ""
}

# Function to confirm dangerous operations
confirm_action() {
    local message="$1"
    local response
    
    echo -e "${YELLOW}$message${NC}"
    read -p "Do you want to continue? (y/N): " response
    case "$response" in
        [yY][eE][sS]|[yY]) 
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

# Function to remove VS Code extensions
uninstall_vscode_extensions() {
    if command_exists code; then
        log_info "Uninstalling VS Code extensions..."
        
        local extensions=(
            "ms-python.python"
            "ms-python.vscode-pylance"
            "ms-toolsai.jupyter"
            "ms-vscode.vscode-serial-monitor"
        )
        
        for ext in "${extensions[@]}"; do
            if code --list-extensions | grep -q "$ext"; then
                log_info "Uninstalling extension: $ext"
                code --uninstall-extension "$ext"
            else
                log_info "Extension not installed: $ext"
            fi
        done
        
        log_success "VS Code extensions processed"
    else
        log_info "VS Code command not available, skipping extension removal"
    fi
}

# Function to remove Python virtual environment and project
remove_project_environment() {
    local repo_dir="$HOME/Desktop/YSP_TDCS_2025"
    local project_dir="$repo_dir/python-interface/src"
    
    if [ -d "$project_dir/.venv" ]; then
        log_info "Removing Python virtual environment..."
        rm -rf "$project_dir/.venv"
        log_success "Virtual environment removed"
    else
        log_info "Virtual environment not found"
    fi
    
    if [ "$_arg_keep_repo" = "off" ] && [ -d "$repo_dir" ]; then
        if confirm_action "This will permanently delete the repository: $repo_dir"; then
            log_info "Removing repository..."
            rm -rf "$repo_dir"
            log_success "Repository removed"
        else
            log_info "Repository kept"
        fi
    elif [ "$_arg_keep_repo" = "on" ]; then
        log_info "Keeping repository as requested"
    else
        log_info "Repository not found"
    fi
}

# Function to uninstall Homebrew packages
uninstall_homebrew_packages() {
    if ! setup_homebrew_path; then
        log_info "Homebrew not found, skipping package removal"
        return 0
    fi
    
    log_info "Uninstalling Homebrew packages..."
    
    # Uninstall casks first
    local casks=("visual-studio-code")
    for cask in "${casks[@]}"; do
        if brew list --cask | grep -q "^$cask$"; then
            log_info "Uninstalling cask: $cask"
            brew uninstall --cask "$cask" || log_error "Failed to uninstall cask: $cask"
        else
            log_info "Cask not installed: $cask"
        fi
    done
    
    # Uninstall brews
    local brews=("ipython" "python@3.12" "python3" "git")
    for brew_pkg in "${brews[@]}"; do
        if brew list | grep -q "^$brew_pkg$"; then
            log_info "Uninstalling brew: $brew_pkg"
            brew uninstall "$brew_pkg" || log_error "Failed to uninstall brew: $brew_pkg"
        else
            log_info "Brew not installed: $brew_pkg"
        fi
    done
    
    # Clean up
    log_info "Cleaning up Homebrew..."
    brew cleanup || log_warning "Homebrew cleanup had issues"
    
    log_success "Homebrew packages processed"
}

# Function to completely remove Homebrew
uninstall_homebrew() {
    if [ "$_arg_keep_homebrew" = "on" ]; then
        log_info "Keeping Homebrew as requested"
        return 0
    fi
    
    if ! setup_homebrew_path; then
        log_info "Homebrew not found, skipping removal"
        return 0
    fi
    
    if confirm_action "This will completely remove Homebrew and all its packages."; then
        log_info "Uninstalling Homebrew..."
        
        # Download and run the official uninstall script
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)"
        
        # Remove any remaining directories
        local homebrew_dirs=(
            "/opt/homebrew"
            "/usr/local/Homebrew"
            "/usr/local/Caskroom"
            "/usr/local/bin/brew"
        )
        
        for dir in "${homebrew_dirs[@]}"; do
            if [ -e "$dir" ]; then
                log_info "Removing remaining Homebrew directory: $dir"
                sudo rm -rf "$dir" 2>/dev/null || log_warning "Could not remove $dir"
            fi
        done
        
        log_success "Homebrew uninstalled"
    else
        log_info "Homebrew removal cancelled"
    fi
}

# Function to remove Xcode Command Line Tools
uninstall_xcode_tools() {
    if [ "$_arg_keep_xcode" = "on" ]; then
        log_info "Keeping Xcode Command Line Tools as requested"
        return 0
    fi
    
    if xcode-select -p &>/dev/null; then
        if confirm_action "This will remove Xcode Command Line Tools. This may affect other development tools."; then
            log_info "Removing Xcode Command Line Tools..."
            sudo rm -rf "$(xcode-select -p)" 2>/dev/null
            sudo xcode-select --reset 2>/dev/null
            
            if ! xcode-select -p &>/dev/null; then
                log_success "Xcode Command Line Tools removed"
            else
                log_error "Failed to completely remove Xcode Command Line Tools"
            fi
        else
            log_info "Xcode Command Line Tools removal cancelled"
        fi
    else
        log_info "Xcode Command Line Tools not found"
    fi
}

# Function to clean up shell configurations
cleanup_shell_config() {
    log_info "Checking shell configuration files for Homebrew references..."
    
    local shell_files=(
        "$HOME/.bashrc"
        "$HOME/.bash_profile"
        "$HOME/.zshrc"
        "$HOME/.profile"
    )
    
    for file in "${shell_files[@]}"; do
        if [ -f "$file" ] && grep -q "homebrew\|/opt/homebrew\|/usr/local/bin/brew" "$file"; then
            log_warning "Found Homebrew references in $file"
            log_info "You may want to manually remove Homebrew-related lines from this file"
        fi
    done
}

# Main execution
print_banner

# Confirm the operation
echo "This script will uninstall components in the following order:"
echo "1. VS Code extensions"
echo "2. Python virtual environment and project"
echo "3. Homebrew packages (from Brewfile)"
if [ "$_arg_keep_homebrew" = "off" ]; then
    echo "4. Homebrew itself"
fi
if [ "$_arg_keep_xcode" = "off" ]; then
    echo "5. Xcode Command Line Tools"
fi
echo ""

if ! confirm_action "Proceed with uninstallation?"; then
    log_info "Uninstallation cancelled"
    exit 0
fi

# Execute uninstallation steps
uninstall_vscode_extensions
remove_project_environment
uninstall_homebrew_packages
uninstall_homebrew
uninstall_xcode_tools
cleanup_shell_config

# Report results
echo ""
if [ ${#FAILURES[@]} -gt 0 ]; then
    log_error "The following errors occurred during uninstallation:"
    for failure in "${FAILURES[@]}"; do
        echo "  - $failure"
    done
    echo ""
    log_info "Some components may need manual removal."
else
    log_success "Uninstallation completed successfully!"
fi

echo ""
log_info "You may need to:"
log_info "- Restart your terminal or source your shell configuration"
log_info "- Manually remove any remaining configuration files"
log_info "- Check for any remaining Homebrew references in shell config files"

# ] <-- needed because of Argbash
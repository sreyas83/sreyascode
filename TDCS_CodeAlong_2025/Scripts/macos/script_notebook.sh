#!/usr/bin/env bash

# ARG_OPTIONAL_BOOLEAN([update],[u],[Update existing tools without installing core dependencies])
# ARG_HELP([This script automates the setup of a MacOS environment for hardware workshop. By default it installs Xcode tools, Homebrew, Python tools, and clones the workshop repository. Use --update to skip core dependency installation.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.11.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.dev for more info
# Generated online by https://argbash.dev/generate

die() {
    local _ret="${2:-1}"
    test "${_PRINT_HELP:-no}" = yes && print_help >&2
    echo "$1" >&2
    exit "${_ret}"
}

begins_with_short_option() {
    local first_option all_short_options='uh'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_update="off"

print_help() {
    printf '%s\n' "This script automates the setup of a MacOS environment for hardware workshop. By default it installs Xcode tools, Homebrew, Python tools, and clones the workshop repository. Use --update to skip core dependency installation."
    printf 'Usage: %s [-u|--(no-)update] [-h|--help]\n' "$0"
    printf '\t%s\n' "-u, --update, --no-update: Update existing tools without installing core dependencies (off by default)"
    printf '\t%s\n' "-h, --help: Prints help"
}

parse_commandline() {
    local _key
    while test $# -gt 0; do
        _key="$1"
        case "$_key" in
        -u | --no-update | --update)
            _arg_update="on"
            test "${1:0:5}" = "--no-" && _arg_update="off"
            ;;
        -u*)
            _arg_update="on"
            _next="${_key##-u}"
            if test -n "$_next" -a "$_next" != "$_key"; then
                { begins_with_short_option "$_next" && shift && set -- "-u" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
            fi
            ;;
        -h | --help)
            print_help
            exit 0
            ;;
        -h*)
            print_help
            exit 0
            ;;
        *)
            _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
            ;;
        esac
        shift
    done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

GREEN='\033[0;32m'  # match square bracket for argbash: ]
YELLOW='\033[1;33m' # match square bracket for argbash: ]
RED='\033[0;31m'    # match square bracket for argbash: ]
NC='\033[0m'        # match square bracket for argbash: ]

# Track failures
declare -a FAILURES=()

log_info() {
    echo -e "${YELLOW}[INFO] $1${NC}"
}

log_success() {
    echo -e "${GREEN}[SUCCESS] $1${NC}"
}

log_error() {
    echo -e "${RED}[ERROR] $1${NC}"
    FAILURES+=("$1")
}

# Function to check if a command exists in PATH
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to find and setup Homebrew
setup_homebrew_path() {
    if command_exists brew; then
        return 0
    fi

    # Check common Homebrew locations
    if [ -x "/opt/homebrew/bin/brew" ]; then
        log_info "Found Homebrew at /opt/homebrew/bin/brew (Apple Silicon)"
        eval "$(/opt/homebrew/bin/brew shellenv)"
        return 0
    elif [ -x "/usr/local/bin/brew" ]; then
        log_info "Found Homebrew at /usr/local/bin/brew (Intel)"
        eval "$(/usr/local/bin/brew shellenv)"
        return 0
    fi

    return 1
}

# Function to check if VS Code is installed
is_vscode_installed() {
    [ -d "/Applications/Visual Studio Code.app" ]
}

# Function to setup VS Code command line tool
setup_vscode_cli() {
    if command_exists code; then
        return 0
    fi

    local vscode_path="/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code"
    if [ -f "$vscode_path" ]; then
        log_info "VS Code found but 'code' command not in PATH. Adding it..."
        # Add to current session
        export PATH="$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
        # Try to add permanently (this might need sudo)
        if ln -sf "$vscode_path" /usr/local/bin/code 2>/dev/null; then
            log_success "Added 'code' command to PATH"
        else
            log_info "Could not add 'code' to PATH permanently. For this session only."
            log_info "To add permanently, run: sudo ln -sf '$vscode_path' /usr/local/bin/code"
        fi
        return 0
    fi
    return 1
}


install_core_dependencies() {
    log_info "Setting up core dependencies..."

    # Install Xcode Command Line Tools
    if ! xcode-select -p &>/dev/null; then
        log_info "Installing Xcode Command Line Tools..."
        log_info "A dialog will appear. Please click 'Install' and wait for the installation to complete."
        xcode-select --install 2>/dev/null

        # Wait for installation
        while ! xcode-select -p &>/dev/null; do
            sleep 5
        done
        log_success "Xcode Command Line Tools installed."
    else
        log_info "Xcode Command Line Tools already installed."
    fi

    # Setup Homebrew
    if ! setup_homebrew_path; then
        log_info "Homebrew not found. Installing..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

        # Setup path for current session
        setup_homebrew_path

        if command_exists brew; then
            log_success "Homebrew installed."
        else
            log_error "Failed to install Homebrew"
            return 1
        fi
    else
        log_info "Homebrew already installed."
    fi

    # Update Homebrew
    if command_exists brew; then
        log_info "Updating Homebrew..."
        brew update
    fi
}

setup_environment_and_shell() {
    log_info "Installing packages from Brewfile..."

    # Check if VS Code is already installed via DMG
    if is_vscode_installed; then
        log_info "VS Code already installed in /Applications. Skipping brew installation."
        # Create a temporary Brewfile without VS Code
        grep -v "visual-studio-code" "$DIR/Brewfile" >"$DIR/Brewfile.tmp"
        brew bundle --file "$DIR/Brewfile.tmp"
        rm "$DIR/Brewfile.tmp"
    else
        # Install everything from Brewfile
        brew bundle --file "$DIR/Brewfile"
    fi

    # Setup VS Code CLI if needed
    setup_vscode_cli

    # Install VS Code extensions if code command is available
    if command_exists code; then
        log_info "Installing VS Code extensions..."
        code --install-extension ms-python.python
        code --install-extension ms-python.vscode-pylance
        code --install-extension ms-toolsai.jupyter
        # code --install-extension ms-vscode.vscode-serial-monitor
    else
        log_error "Could not install VS Code extensions - 'code' command not available"
    fi

    log_success "Environment setup completed."
}

stash_pull_stash_pop() {
    log_info "Stashing, pulling, and popping changes..."

    # Stash any local changes
    if git diff-index --quiet HEAD --; then
        log_info "No local changes to stash."
    else
        log_info "Stashing local changes..."
        git stash push -m "Stashed changes before script execution"
    fi

    # Pull latest changes
    log_info "Pulling latest changes from repository..."
    git pull

    # Pop the stash if it exists
    if git stash list | grep -q "Stashed changes before script execution"; then
        log_info "Popping stashed changes..."
        git stash pop
    else
        log_info "No stashed changes to pop."
    fi
}


navigate_to_local_repo() {
    local repo_path="$HOME/Desktop/TDCS_CodeAlong_2025"
    if [ -d "$repo_path" ]; then
        log_info "Navigating to local repository: $repo_path"
        cd "$repo_path" || {
            log_error "Could not navigate to local repository directory: $repo_path"
            exit 1
        }
    else
        log_error "Local repository not found at: $repo_path"
        exit 1
    fi
}

# Main execution

cd $HOME || {
    log_error "Could not change to home directory"
    exit 1
}

if [ "$_arg_update" = "on" ]; then
    setup_homebrew_path
    setup_environment_and_shell
else
    # Default install behavior
    install_core_dependencies
    setup_environment_and_shell
    # install_python_tools
fi

# Clone repository
log_info "Cloning YSP TDCS repository..."
REPO_DIR="$HOME/Desktop/TDCS_CodeAlong_2025"
if git clone https://github.com/Makerspace-Ashoka/TDCS_CodeAlong_2025.git "$REPO_DIR" 2>/dev/null; then
    log_success "Repository cloned to Desktop."

else
    if [ -d "$REPO_DIR" ]; then
        log_info "Repository already exists. Pulling latest changes..."
        cd "$REPO_DIR" && git pull
        log_success "Repository updated."
        cd - >/dev/null
    else
        log_error "Failed to clone repository"
    fi
fi

# Checkout to the correct branch
# GIT_BRANCH="mac-script-daily"

# if [ -d "$REPO_DIR" ]; then
#     cd "$REPO_DIR" || {
#         log_error "Could not navigate to repository directory"
#         exit 1
#     }

#     if git checkout "$GIT_BRANCH" 2>/dev/null; then
#         log_success "Checked out to branch '$GIT_BRANCH'."
#     else    
#         log_error "Failed to checkout to branch '$GIT_BRANCH'."
#     fi

# fi


# Setup UV environment
PROJECT_DIR="$REPO_DIR/Notebooks"
if [ -d "$PROJECT_DIR" ]; then
    log_info "Project directory found: $PROJECT_DIR"
    cd "$PROJECT_DIR" || {
        log_error "Could not navigate to project directory"
        exit 1
    }

    log_info "Setting up UV environment..."

    # Check if uv is installed
    if ! command_exists uv; then
        log_error "Command 'uv' not found. This should've been installed by the Brewfile."
    else
        log_info "Found 'uv' command."
    fi

    uv sync
    if [ $? -eq 0 ]; then
        log_success "UV environment synced successfully."
    else
        log_error "Failed to sync UV environment"
    fi
fi

# Day-2
log_info "Setting up Day-2 environment..."
navigate_to_local_repo
stash_pull_stash_pop

if [ -d "$PROJECT_DIR" ]; then
    # Open VS Code
    if command_exists code; then
        log_info "Opening Visual Studio Code..."
        code "$PROJECT_DIR"
        log_success "VS Code opened in project directory."
    elif is_vscode_installed; then
        log_info "Opening VS Code via open command..."
        open -a "Visual Studio Code" .
        log_success "VS Code opened in project directory."
    else
        log_error "VS Code not available"
    fi
else
    log_error "Project directory not found: $PROJECT_DIR"
fi

# Report any failures
if [ ${#FAILURES[@]} -gt 0 ]; then
    echo
    log_error "The following errors occurred during setup:"
    for failure in "${FAILURES[@]}"; do
        echo "  - $failure"
    done
    echo
    log_info "Please address these issues and run the script again if needed."
else
    echo
    log_success "Setup completed successfully!"
fi

# ] <-- needed because of Argbash
